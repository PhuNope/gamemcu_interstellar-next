CCEffect %{
  temporaries:
    b1: &b1
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one
        blendSrcAlpha: src_alpha
        blendDstAlpha: one
    b2: &b2
      targets:
      - blend: true
        blendSrc: one
        blendDst: one_minus_src_alpha
        blendSrcAlpha: one
        blendDstAlpha: one_minus_src_alpha
    d1: &d1 { depthTest: true, depthWrite: false }
    r1: &r1 { cullMode: none }
    p1: &p1
      mainTexture:            { value: grey }
      mainTiling_Offset:      { value: [1, 1, 0, 0]  }
      frameTile_velLenScale:  { value: [1, 1, 0, 0]  }
    p2: &p2
      <<: *p1
      tintColor:              { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }

  techniques:
  - name: add
    passes:
    - vert: tinted-vs:vs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p2
    - vert: tinted-vs:vs_main
      frag: tinted-fs:add
      phase: deferred-forward
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      propertyIndex: 0
}%

// TODO: soft particle
CCProgram tinted-vs %{
  precision mediump float;
  #include <builtin/internal/particle-common>
  in vec3 a_position; // center position
  in vec4 a_texCoord;  // x:index y:size zw:texcoord
  in vec3 a_texCoord1; // xyz:velocity
  in vec3 a_texCoord2;
  in vec4 a_color;

  #if CC_DRAW_WIRE_FRAME
    out vec3 vBarycentric;
  #endif

  out float v_gradual;

  vec4 vs_main() {
    highp vec4 pos = vec4(a_position, 1);
    vec4 velocity = vec4(a_texCoord1.xyz, 0);

    #if !CC_USE_WORLD_SPACE
      pos = cc_matWorld * pos;
      velocity = cc_matWorld * velocity;
    #endif

    float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;
    vec3 dir = pos.xyz - cc_cameraPos.xyz;
    vec3 camUp = normalize(cross(dir, velocity.xyz));
    v_gradual = length(dir);
    float size_screen = 0.1+ clamp(0.6 - v_gradual,0.,1.)*30.;
    pos.xyz += camUp * vertOffset * size_screen;
    pos = cc_matViewProj * pos;
    uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;
    color = a_color;
    #if CC_DRAW_WIRE_FRAME
      vBarycentric = a_texCoord2;
    #endif
    return pos;
  }
}%

CCProgram tinted-fs %{
  precision mediump float;
  #include <legacy/output>

  in vec2 uv;
  in vec4 color;
  in float v_gradual;
  #if CC_DRAW_WIRE_FRAME
    in vec3 vBarycentric;
  #endif

  uniform sampler2D mainTexture;
  uniform FragConstants {
    vec4 tintColor;
  };

  vec4 add () {
    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);
    float g = clamp(v_gradual,0.,1.);
    col.a *= g*g;
    col.a *= smoothstep(0.,0.1+0.3*g,uv.y)*smoothstep(1.,0.9-0.3*g,uv.y);
#if CC_DRAW_WIRE_FRAME
    if (any(lessThan(vBarycentric, vec3(0.02)))) {
        col = vec4(0., 1., 1., 1.);
    }
#endif
    return CCFragOutput(col);
  }

  vec4 multiply () {
    vec4 col;
    vec4 texColor = texture(mainTexture, uv);
    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);
    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);
#if CC_DRAW_WIRE_FRAME
    if (any(lessThan(vBarycentric, vec3(0.02)))) {
        col = vec4(0., 1., 1., col.a);
    }
#endif
    return CCFragOutput(col);
  }
}%

CCProgram no-tint-fs %{
  precision mediump float;
  #include <legacy/output>

  in vec2 uv;
  in vec4 color;

  uniform sampler2D mainTexture;

  vec4 addSmooth () {
    vec4 col = color * texture(mainTexture, uv);
    col.rgb *= col.a;
    return CCFragOutput(col);
  }

  vec4 premultiplied () {
    vec4 col = color * texture(mainTexture, uv) * color.a;
    return CCFragOutput(col);
  }
}%
